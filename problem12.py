"""
PROBLEM 12

The sequence of triangle numbers is generated by adding the 
natural numbers. So the 7th triangle number would be 
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...


Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over 
five divisors.

What is the value of the first triangle number to have over 
five hundred divisors?

https://projecteuler.net/problem=12
"""

import math 
import time 
from functions import *
from functools import reduce
from operator import mul 

# The nth triangle number
def triangle_number_generator(min, max):
    for n in range(min, max+1):
        yield((n/2)*(1 + n))

def count_factors(num):
    return reduce(
        mul,
        [i+1 for i in prime_factorization(num).values()],
        1
    )

for i in triangle_number_generator(10**12, 10**16):
# for i in triangle_number_generator(1, 7):
    if count_factors(i) == 500:
        print(i)
        break